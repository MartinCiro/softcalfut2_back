
datasource db {
  provider = "postgresql"
  url      = env("DB_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Anuncio {
  id               Int      @id @default(autoincrement())
  titulo           String   @unique
  contenido        String
  imagenUrl        String

  idFechaCreacion  Int @map("id_fecha_creacion")
  idEstado         Int @map("id_estado")

  fechaCreacion    Fecha   @relation("fecha_anuncio", fields: [idFechaCreacion], references: [id], onDelete: Cascade)
  estado           Estado  @relation("estado_anuncio", fields: [idEstado], references: [id], onDelete: Cascade)

  actualizadoEn    DateTime @updatedAt

  @@map("anuncio")
}


model Categoria {
  id               Int                @id @default(autoincrement())
  nombre_categoria String?            @map("nombre_categoria")
  
  equipo       Equipo[]               @relation("equipo")

  @@map("categoria")
}


model CedulaDeportiva {
  id                        Int       @id @default(autoincrement())
  id_fecha_creacion_deportiva   Int
  estado_cedula              Int
  id_torneo                  Int
  id_fecha_actualizacion     Int
  id_equipo                  Int
  foto_base                  String?

  // Relaciones
  equipo                     Equipo?      @relation(fields: [id_equipo], references: [id], onDelete: Cascade)
  torneo                     Torneo?      @relation(fields: [id_torneo], references: [id], onDelete: Cascade, name: "TorneoToCedulaDeportiva")
  fecha_actualizacion        Fecha?       @relation("Fecha_r_cc", fields: [id_fecha_actualizacion], references: [id], onDelete: Cascade)
  fecha_creacion_deportiva   Fecha?       @relation("Fecha_c_depo", fields: [id_fecha_creacion_deportiva], references: [id], onDelete: Cascade)
  estado                     Estado       @relation(fields: [estado_cedula], references: [id])

  @@map("cedula_deportiva")
}


model Equipo {
  id           Int    @id @default(autoincrement())
  nom_equipo   String @map("nom_equipo") @unique
  documento    String @map("documento") @unique
  categoria_id Int?     @map("categoria")

  usuario Usuario? @relation(fields: [documento], references: [documento], onDelete: Cascade, name: "EquipoToUsuario")

  // Relaciones con Programacion
  programacion_local     Programacion[] @relation("EquipoLocal")
  programacion_visitante Programacion[] @relation("EquipoVisitante")

  // Relaciones adicionales
  cedulas          CedulaDeportiva[]
  usuariosxEquipo  UsuarioXEquipo[]
  categoria        Categoria? @relation("equipo", fields: [categoria_id], references: [id])

  @@map("equipo")
}


model Estado {
  id          Int     @id @default(autoincrement())  
  nombre      String  @unique @map("nombre_estado")
  descripcion String?

  usuarios    Usuario[]
  cedulaDeportiva CedulaDeportiva[]
  estado_anuncio Anuncio[]        @relation("estado_anuncio")
  estado_jugador UsuarioXEquipo[] @relation("estado_jugador")

  @@map("estado") 
}


model Fecha {
  id     Int      @id @default(autoincrement())
  fecha  DateTime @unique

  // Relaciones inversas
  usuariosNacimiento Usuario[] @relation("FechaNacimiento")
  usuariosRegistro   Usuario[] @relation("FechaRegistro")
  fecha_registro_cedula CedulaDeportiva[] @relation("Fecha_r_cc")
  fecha_creacion_deportiva   CedulaDeportiva[] @relation("Fecha_c_depo")
  fecha_anuncio      Anuncio[] @relation("fecha_anuncio")
  programacion Programacion[]         @relation("programacion_fecha")
}


model LugarEncuentro {
  id               Int           @id @default(autoincrement())
  nombre       String?           @map("nombre")
  direccion    String?           @map("direccion")
  programacion  Programacion[]   @relation("lugar_encuentro")

  @@map("lugar_encuentro")
}


model Notas {
  id          Int     @id @default(autoincrement())  
  nombre      String  @unique
  descripcion String?

  usuarioXequipo  UsuarioXEquipo[]      @relation("notas_jugador")

  @@map("notas") 
}


model Permiso {
  id          Int     @id @default(autoincrement())  
  nombre      String @unique @map("nombre_permiso")
  descripcion String? 

  rolXPermiso RolXPermiso[]
  @@map("permiso") 
}


model Programacion {
  id                  Int      @id @default(autoincrement())
  lugar_encuentro     Int?      @map("lugar_encuentro")
  rama                String
  
  fecha_encuentro     Int      @map("fecha_encuentro")
  nombre_competencia  String   @map("nombre_competencia")
  
  id_equipo_local     Int
  id_equipo_visitante Int

  // Relaciones
  equipoLocal     Equipo    @relation("EquipoLocal", fields: [id_equipo_local], references: [id])
  equipoVisitante Equipo    @relation("EquipoVisitante", fields: [id_equipo_visitante], references: [id])
  fecha           Fecha    @relation("programacion_fecha", fields: [fecha_encuentro], references: [id])
  lugarEncuentro   LugarEncuentro? @relation("lugar_encuentro", fields: [lugar_encuentro], references: [id])

  @@map("programacion")
}


model Rol {
  id          Int     @id @default(autoincrement())  
  nombre      String @unique @map("nombre_rol")
  descripcion String?

  usuarios    Usuario[]       
  rolXPermiso RolXPermiso[]
  @@map("rol") 
}


model RolXPermiso {
  id_rol    Int
  id_permiso Int

  rol     Rol     @relation(fields: [id_rol], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permiso Permiso @relation(fields: [id_permiso], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@id([id_rol, id_permiso])
  @@map("rol_x_permiso")      
}


model Torneo {
  id            Int                 @id @default(autoincrement())
  nombre_torneo String?            @map("nombre_torneo")

  cedulas       CedulaDeportiva[]  @relation("TorneoToCedulaDeportiva")

  @@map("torneos")
}


model UsuarioXEquipo {
  id_equipo      Int
  documento_user String
  id_nota        Int?
  id_estado      Int?

  equipo  Equipo  @relation(fields: [id_equipo], references: [id], onUpdate: Cascade, onDelete: Cascade)
  usuario Usuario @relation(fields: [documento_user], references: [documento], onDelete: Cascade, name: "UsuarioXEquipo")
  notas   Notas?  @relation("notas_jugador",  fields: [id_nota],   references: [id])
  estado  Estado? @relation("estado_jugador", fields: [id_estado], references: [id])

  @@id([id_equipo, documento_user]) 
  @@map("usuario_x_equipo")
}


model Usuario {
  documento              String   @id @map("documento")
  nombres                String
  apellido               String
  email                  String
  info_perfil            String?
  num_contacto           String?
  nom_user               String
  pass                   String
  id_rol                 Int
  estado_id              Int
  id_fecha_nacimiento    Int?
  id_fecha_registro      Int?

  rol     Rol     @relation(fields: [id_rol], references: [id], onDelete: Cascade, onUpdate: NoAction)
  estado  Estado  @relation(fields: [estado_id], references: [id])

  fecha_nacimiento      Fecha? @relation("FechaNacimiento", fields: [id_fecha_nacimiento], references: [id], onDelete: Cascade)
  fecha_registro        Fecha? @relation("FechaRegistro", fields: [id_fecha_registro], references: [id], onDelete: Cascade)

  usuarioXEquipos UsuarioXEquipo[] @relation("UsuarioXEquipo")

  // Relaci√≥n inversa a la entidad Equipo
  equipos   Equipo[] @relation("EquipoToUsuario")

  @@unique([documento])
  @@map("usuario")
}